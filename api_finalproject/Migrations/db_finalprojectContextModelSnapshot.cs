// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api_finalproject.Models;

namespace api_finalproject.Migrations
{
    [DbContext(typeof(db_finalprojectContext))]
    partial class db_finalprojectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("api_finalproject.Models.Categorium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Nombre")
                        .HasColumnType("int(11)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("categoria");

                    b
                        .UseCollation("utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("api_finalproject.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contrasena");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("email");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<int>("Latitud")
                        .HasColumnType("int(11)")
                        .HasColumnName("latitud");

                    b.Property<int>("Longitud")
                        .HasColumnType("int(11)")
                        .HasColumnName("longitud");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nombre_completo");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nombre_usuario");

                    b.Property<int>("NumeroContacto")
                        .HasColumnType("int(11)")
                        .HasColumnName("numero_contacto");

                    b.HasKey("Id");

                    b.ToTable("cliente");

                    b
                        .UseCollation("utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("api_finalproject.Models.DetalleOrden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int(11)")
                        .HasColumnName("cantidad");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int(11)")
                        .HasColumnName("orden_id");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int(11)")
                        .HasColumnName("producto_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrdenId" }, "orden_id");

                    b.HasIndex(new[] { "ProductoId" }, "producto_id");

                    b.ToTable("detalle_orden");

                    b
                        .UseCollation("utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("api_finalproject.Models.EstadoOrden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("estado_orden");

                    b
                        .UseCollation("utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("api_finalproject.Models.EstadoPedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("estado_pedido");

                    b
                        .UseCollation("utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("api_finalproject.Models.Orden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("cliente_id");

                    b.Property<string>("ComentarioDireccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("comentario_direccion");

                    b.Property<int>("EstadoOrdenId")
                        .HasColumnType("int(11)")
                        .HasColumnName("estado_orden_id");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClienteId" }, "cliente_id");

                    b.HasIndex(new[] { "EstadoOrdenId" }, "estado_orden_id");

                    b.ToTable("orden");

                    b
                        .UseCollation("utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("api_finalproject.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("EstadoPedidoId")
                        .HasColumnType("int(11)")
                        .HasColumnName("estado_pedido_id");

                    b.Property<int>("Latitud")
                        .HasColumnType("int(11)")
                        .HasColumnName("latitud");

                    b.Property<int>("Longitud")
                        .HasColumnType("int(11)")
                        .HasColumnName("longitud");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int(11)")
                        .HasColumnName("orden_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EstadoPedidoId" }, "estado_pedido_id");

                    b.HasIndex(new[] { "OrdenId" }, "orden_id")
                        .HasDatabaseName("orden_id1");

                    b.ToTable("pedido");

                    b
                        .UseCollation("utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("api_finalproject.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int(11)")
                        .HasColumnName("categoria_id");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("imagen");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nombre");

                    b.Property<int>("Precio")
                        .HasColumnType("int(11)")
                        .HasColumnName("precio");

                    b.Property<int>("Stock")
                        .HasColumnType("int(11)")
                        .HasColumnName("stock");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoriaId" }, "categoria_id");

                    b.ToTable("producto");

                    b
                        .UseCollation("utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("api_finalproject.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("contrasena");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nombre_completo");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("nombre_usuario");

                    b.HasKey("Id");

                    b.ToTable("usuario");

                    b
                        .UseCollation("utf8mb4_0900_ai_ci");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_finalproject.Models.DetalleOrden", b =>
                {
                    b.HasOne("api_finalproject.Models.Orden", "Orden")
                        .WithMany("DetalleOrdens")
                        .HasForeignKey("OrdenId")
                        .HasConstraintName("detalle_orden_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_finalproject.Models.Producto", "Producto")
                        .WithMany("DetalleOrdens")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("detalle_orden_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("api_finalproject.Models.Orden", b =>
                {
                    b.HasOne("api_finalproject.Models.Cliente", "Cliente")
                        .WithMany("Ordens")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("orden_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_finalproject.Models.EstadoOrden", "EstadoOrden")
                        .WithMany("Ordens")
                        .HasForeignKey("EstadoOrdenId")
                        .HasConstraintName("orden_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("EstadoOrden");
                });

            modelBuilder.Entity("api_finalproject.Models.Pedido", b =>
                {
                    b.HasOne("api_finalproject.Models.EstadoPedido", "EstadoPedido")
                        .WithMany("Pedidos")
                        .HasForeignKey("EstadoPedidoId")
                        .HasConstraintName("pedido_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_finalproject.Models.Orden", "Orden")
                        .WithMany("Pedidos")
                        .HasForeignKey("OrdenId")
                        .HasConstraintName("pedido_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoPedido");

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("api_finalproject.Models.Producto", b =>
                {
                    b.HasOne("api_finalproject.Models.Categorium", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("producto_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("api_finalproject.Models.Categorium", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("api_finalproject.Models.Cliente", b =>
                {
                    b.Navigation("Ordens");
                });

            modelBuilder.Entity("api_finalproject.Models.EstadoOrden", b =>
                {
                    b.Navigation("Ordens");
                });

            modelBuilder.Entity("api_finalproject.Models.EstadoPedido", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("api_finalproject.Models.Orden", b =>
                {
                    b.Navigation("DetalleOrdens");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("api_finalproject.Models.Producto", b =>
                {
                    b.Navigation("DetalleOrdens");
                });
#pragma warning restore 612, 618
        }
    }
}
